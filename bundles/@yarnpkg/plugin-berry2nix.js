/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-berry2nix",
factory: function (require) {
var plugin=(()=>{var A=Object.create;var S=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var h=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,o)=>(typeof require<"u"?require:e)[o]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var G=(t,e)=>{for(var o in e)S(t,o,{get:e[o],enumerable:!0})},$=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of H(e))!V.call(t,i)&&i!==o&&S(t,i,{get:()=>e[i],enumerable:!(r=E(e,i))||r.enumerable});return t};var K=(t,e,o)=>(o=t!=null?A(J(t)):{},$(e||!t||!t.__esModule?S(o,"default",{value:t,enumerable:!0}):o,t)),z=t=>$(S({},"__esModule",{value:!0}),t);var W={};G(W,{default:()=>q});var g=K(h("fs/promises")),x=h("@yarnpkg/cli"),a=h("@yarnpkg/core"),n=h("@yarnpkg/fslib"),P=h("@yarnpkg/plugin-git"),F=h("@yarnpkg/plugin-npm"),R=h("@yarnpkg/plugin-patch"),u=h("clipanion");function B(t){if(t===void 0)return{cacheKey:null,hash:null};let e=t.indexOf("/");if(e<0)throw new Error("Invalid checksum");let o=t.substring(0,e),r=t.substring(e+1);return{cacheKey:o,hash:r}}function O(t,e=0){let o=[],r=" ".repeat(e);for(let[i,c]of Object.entries(t))c!==void 0&&(c===null?o.push(`${r}${i} = ${JSON.stringify(c)};`):Array.isArray(c)?o.push(`${r}${i} = ${JSON.stringify(c)};`):typeof c=="object"?(o.push(`${r}${i} = {`),o.push(O(c,e+2)),o.push(`${r}};`)):o.push(`${r}${i} = ${JSON.stringify(c)};`));return o.join(`
`)}async function N(t){let e=await g.default.open("berry.nix","w");await g.default.appendFile(e,`[
`);for(let o of t)await g.default.appendFile(e,`  {
`),await g.default.appendFile(e,O(o,4)),await g.default.appendFile(e,`
  }
`);await g.default.appendFile(e,`]
`)}async function j(t,e){var i,c;let o=(c=(i=t.configuration.plugins.get("@yarnpkg/plugin-npm"))==null?void 0:i.fetchers)==null?void 0:c.find(s=>"getLocatorUrl"in s&&typeof s.getLocatorUrl=="function"),r=[];for(let s of t.storedPackages.values()){let{protocol:p}=a.structUtils.parseRange(s.reference),w=e.getVersionFilename(s),k=t.storedChecksums.get(s.locatorHash),{hash:v}=B(k);if(v===null)continue;let f=v,m={name:s.name,scope:s.scope,identHash:s.identHash,locatorHash:s.locatorHash,reference:s.reference},y={compressionLevel:t.configuration.get("compressionLevel"),prefixPath:a.structUtils.getIdentVendorPath(s)};if(p==="npm:"){let l=`${F.npmConfigUtils.getScopeRegistry(s.scope,{configuration:t.configuration})}${o.getLocatorUrl(s)}`;r.push({name:w,convert:y,source:{type:"url",url:l},locator:m,sha512:f})}else if(p==="patch:"){let{sourceLocator:d}=R.patchUtils.parseLocator(s),l=e.getVersionFilename(d);r.push({name:w,source:{type:"patch",source:l},locator:m,sha512:f})}else if(p==="git+ssh:"||p==="git+https:"){let{repo:d,treeish:l}=P.gitUtils.splitRepoUrl(s.reference);if(l.protocol!==P.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");r.push({name:w,convert:y,source:{type:"git",url:d.substring(4),rev:l.request},prepare:!0,locator:m,sha512:f})}else if(s.reference.startsWith("https://github.com/")){let{repo:d,treeish:l}=P.gitUtils.splitRepoUrl(s.reference);if(l.protocol!==P.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");let I=`https://codeload.github.com${new URL(d).pathname.replace(/.git$/,"")}/tar.gz/${l.request}`;r.push({name:w,convert:y,source:{type:"url",url:I},prepare:!0,locator:m,sha512:f})}}return r}var b=class extends x.BaseCommand{async execute(){let e=await a.Configuration.find(this.context.cwd,this.context.plugins),{project:o}=await a.Project.find(e,this.context.cwd),r=await a.Cache.find(e);await o.applyLightResolution(),await N(await j(o,r))}};b.paths=[["makeBerryNix"]];var L=class extends x.BaseCommand{constructor(){super(...arguments);this.source=u.Option.String();this.target=u.Option.String();this.locator=u.Option.String()}async execute(){let o=await a.Configuration.find(this.context.cwd,this.context.plugins),r=JSON.parse(await n.xfs.readFilePromise(n.npath.toPortablePath(this.locator),"utf8")),i=n.npath.toPortablePath(this.source),c=n.npath.toPortablePath(this.target);await n.xfs.mktempPromise(async s=>{var f;let p;if((await n.xfs.statPromise(i)).isDirectory())p=i;else{let m=new n.CwdFS(s),y=await n.xfs.readFilePromise(i);await a.tgzUtils.extractArchiveTo(y,m,{stripComponents:1}),p=s}let k=P.gitUtils.splitRepoUrl(r.reference),v=n.ppath.join(this.context.cwd,c);await a.scriptUtils.prepareExternalProject(p,v,{configuration:o,report:new a.StreamReport({configuration:o,stdout:this.context.stdout}),workspace:(f=k.extra.workspace)!=null?f:null,locator:r})})}};L.paths=[["prepareDependency"]];var U=class extends x.BaseCommand{constructor(){super(...arguments);this.source=u.Option.String();this.target=u.Option.String();this.compressionLevel=u.Option.String("--compressionLevel","mixed");this.prefixPath=u.Option.String()}async execute(){let o=n.npath.toPortablePath(this.source),r=n.npath.toPortablePath(this.target),i=this.compressionLevel==="mixed"?"mixed":parseInt(this.compressionLevel),c=await n.xfs.readFilePromise(o),s=await a.tgzUtils.convertToZip(c,{compressionLevel:i,prefixPath:n.npath.toPortablePath(this.prefixPath),stripComponents:1});s.saveAndClose();let p=s.getRealPath();await n.xfs.copyFilePromise(p,r)}};U.paths=[["tgzToZip"]];var C=class extends x.BaseCommand{constructor(){super(...arguments);this.locator=u.Option.String()}async execute(){let o=JSON.parse(await n.xfs.readFilePromise(n.npath.toPortablePath(this.locator),"utf8")),r=await a.Configuration.find(this.context.cwd,this.context.plugins),{project:i}=await a.Project.find(r,this.context.cwd),c=await a.Cache.find(r);await i.applyLightResolution();let s=r.makeFetcher();await s.fetch(o,{checksums:i.storedChecksums,project:i,cache:c,fetcher:s,report:new a.StreamReport({configuration:r,stdout:this.context.stdout}),cacheOptions:{mirrorWriteOnly:!0}})}};C.paths=[["fetchLocator"]];var T={commands:[U,b,C,L],hooks:{async afterAllInstalled(t,{cache:e}){process.env.SKIP_BERRY_NIX===void 0&&await N(await j(t,e))}}},q=T;return z(W);})();
return plugin;
}
};
