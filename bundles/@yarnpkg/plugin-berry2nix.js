/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-berry2nix",
factory: function (require) {
var plugin=(()=>{var A=Object.create;var y=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,G=Object.prototype.hasOwnProperty;var f=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(o,e)=>(typeof require<"u"?require:o)[e]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var H=(t,o)=>{for(var e in o)y(t,e,{get:o[e],enumerable:!0})},k=(t,o,e,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of E(o))!G.call(t,s)&&s!==e&&y(t,s,{get:()=>o[s],enumerable:!(r=F(o,s))||r.enumerable});return t};var J=(t,o,e)=>(e=t!=null?A(z(t)):{},k(o||!t||!t.__esModule?y(e,"default",{value:t,enumerable:!0}):e,t)),V=t=>k(y({},"__esModule",{value:!0}),t);var B={};H(B,{default:()=>Z});var v=J(f("fs/promises")),x=f("@yarnpkg/cli"),n=f("@yarnpkg/core"),i=f("@yarnpkg/fslib"),m=f("@yarnpkg/plugin-git"),U=f("@yarnpkg/plugin-npm"),L=f("@yarnpkg/plugin-patch"),l=f("clipanion");function _(t){if(t===void 0)return{cacheKey:null,hash:null};let o=t.indexOf("/");if(o<0)throw new Error("Invalid checksum");let e=t.substring(0,o),r=t.substring(o+1);return{cacheKey:e,hash:r}}var K=/[a-zA-Z_][a-zA-Z0-9_'-]*/;function S(t){return K.test(t)?t:JSON.stringify(t)}function P(t,o=0){let e=" ".repeat(o);if(t===void 0)throw new Error("undefined cannot be represented");if(t===null)return`${e}${JSON.stringify(t)}`;if(Array.isArray(t)){let r=t.map(s=>P(s,o+2));return`${e}[
${r.join(`
`)}
${e}]`}else return typeof t=="object"?`${e}{
${O(t,o+2)}
${e}}`:`${e}${JSON.stringify(t)}`}function O(t,o=0){let e=[],r=" ".repeat(o);for(let[s,a]of Object.entries(t))if(a!==void 0)if(a===null)e.push(`${r}${S(s)} = ${P(a)};`);else if(Array.isArray(a)){e.push(`${r}${S(s)} = [`);for(let c of a)e.push(P(c,o+2));e.push(`${r}];`)}else typeof a=="object"?(e.push(`${r}${S(s)} = {`),e.push(O(a,o+2)),e.push(`${r}};`)):e.push(`${r}${S(s)} = ${P(a)};`);return e.join(`
`)}async function j(t){await v.default.writeFile("berry.nix",`${P(t)}
`)}async function I(t,o){let e=[];for(let r of t.storedPackages.values()){let{protocol:s}=n.structUtils.parseRange(r.reference),a=o.getVersionFilename(r),c=t.storedChecksums.get(r.locatorHash),{hash:u}=_(c);if(u===null)continue;let d=u,g={name:r.name,scope:r.scope,identHash:r.identHash,locatorHash:r.locatorHash,reference:r.reference},w={compressionLevel:t.configuration.get("compressionLevel"),prefixPath:n.structUtils.getIdentVendorPath(r)};if(s==="npm:"){let p=`${U.npmConfigUtils.getScopeRegistry(r.scope,{configuration:t.configuration})}${U.NpmSemverFetcher.getLocatorUrl(r)}`;e.push({name:a,convert:w,source:{type:"url",url:p},locator:g,sha512:d})}else if(s==="patch:"){let{sourceLocator:h}=L.patchUtils.parseLocator(r),p=o.getVersionFilename(h);e.push({name:a,source:{type:"patch",source:p},locator:g,sha512:d})}else if(s==="git+ssh:"||s==="git+https:"){let{repo:h,treeish:p}=m.gitUtils.splitRepoUrl(r.reference);if(p.protocol!==m.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");e.push({name:a,convert:w,source:{type:"git",url:h.substring(4),rev:p.request},prepare:!0,locator:g,sha512:d})}else if(r.reference.startsWith("https://github.com/")){let{repo:h,treeish:p}=m.gitUtils.splitRepoUrl(r.reference);if(p.protocol!==m.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");let N=`https://codeload.github.com${new URL(h).pathname.replace(/.git$/,"")}/tar.gz/${p.request}`;e.push({name:a,convert:w,source:{type:"url",url:N},prepare:!0,locator:g,sha512:d})}}return e}var $=class extends x.BaseCommand{async execute(){let o=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:e}=await n.Project.find(o,this.context.cwd),r=await n.Cache.find(o);await e.applyLightResolution(),await j(await I(e,r))}};$.paths=[["makeBerryNix"]];var b=class extends x.BaseCommand{constructor(){super(...arguments);this.source=l.Option.String();this.target=l.Option.String();this.locator=l.Option.String()}async execute(){let e=await n.Configuration.find(this.context.cwd,this.context.plugins),r=JSON.parse(await i.xfs.readFilePromise(i.npath.toPortablePath(this.locator),"utf8")),s=i.npath.toPortablePath(this.source),a=i.npath.toPortablePath(this.target);await i.xfs.mktempPromise(async c=>{let u;if((await i.xfs.statPromise(s)).isDirectory())u=s;else{let h=new i.CwdFS(c),p=await i.xfs.readFilePromise(s);await n.tgzUtils.extractArchiveTo(p,h,{stripComponents:1}),u=c}let g=m.gitUtils.splitRepoUrl(r.reference),w=i.ppath.join(this.context.cwd,a);await n.scriptUtils.prepareExternalProject(u,w,{configuration:e,report:new n.StreamReport({configuration:e,stdout:this.context.stdout}),workspace:g.extra.workspace??null,locator:r})})}};b.paths=[["prepareDependency"]];var C=class extends x.BaseCommand{constructor(){super(...arguments);this.source=l.Option.String();this.target=l.Option.String();this.compressionLevel=l.Option.String("--compressionLevel","mixed");this.prefixPath=l.Option.String()}async execute(){let e=i.npath.toPortablePath(this.source),r=i.npath.toPortablePath(this.target),s=this.compressionLevel==="mixed"?"mixed":parseInt(this.compressionLevel),a=await i.xfs.readFilePromise(e),c=await n.tgzUtils.convertToZip(a,{compressionLevel:s,prefixPath:i.npath.toPortablePath(this.prefixPath),stripComponents:1});c.saveAndClose();let u=c.getRealPath();await i.xfs.copyFilePromise(u,r)}};C.paths=[["tgzToZip"]];var R=class extends x.BaseCommand{constructor(){super(...arguments);this.locator=l.Option.String()}async execute(){let e=JSON.parse(await i.xfs.readFilePromise(i.npath.toPortablePath(this.locator),"utf8")),r=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:s}=await n.Project.find(r,this.context.cwd),a=await n.Cache.find(r);await s.applyLightResolution();let c=r.makeFetcher();await c.fetch(e,{checksums:s.storedChecksums,project:s,cache:a,fetcher:c,report:new n.StreamReport({configuration:r,stdout:this.context.stdout}),cacheOptions:{mirrorWriteOnly:!0}})}};R.paths=[["fetchLocator"]];var T={commands:[C,$,R,b],hooks:{async afterAllInstalled(t,{cache:o}){process.env.SKIP_BERRY_NIX===void 0&&await j(await I(t,o))}}},Z=T;return V(B);})();
return plugin;
}
};
