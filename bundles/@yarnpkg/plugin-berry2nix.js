/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-berry2nix",
factory: function (require) {
var plugin=(()=>{var z=Object.create;var b=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var h=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(r,e)=>(typeof require<"u"?require:r)[e]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var _=(t,r)=>{for(var e in r)b(t,e,{get:r[e],enumerable:!0})},L=(t,r,e,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of H(r))!V.call(t,n)&&n!==e&&b(t,n,{get:()=>r[n],enumerable:!(o=G(r,n))||o.enumerable});return t};var K=(t,r,e)=>(e=t!=null?z(J(t)):{},L(r||!t||!t.__esModule?b(e,"default",{value:t,enumerable:!0}):e,t)),T=t=>L(b({},"__esModule",{value:!0}),t);var X={};_(X,{default:()=>W});var N=K(h("fs/promises")),x=h("@yarnpkg/cli"),i=h("@yarnpkg/core"),a=h("@yarnpkg/fslib"),d=h("@yarnpkg/plugin-git"),F=h("@yarnpkg/plugin-npm"),O=h("@yarnpkg/plugin-patch"),u=h("clipanion");function Z(t){if(t===void 0)return{cacheKey:null,hash:null};let r=t.indexOf("/");if(r<0)throw new Error("Invalid checksum");let e=t.substring(0,r),o=t.substring(r+1);return{cacheKey:e,hash:o}}var B=/[a-zA-Z_][a-zA-Z0-9_'-]*/;function $(t){return B.test(t)?t:JSON.stringify(t)}function y(t,r=0){let e=" ".repeat(r);if(t===void 0)throw new Error("undefined cannot be represented");if(t===null)return`${e}${JSON.stringify(t)}`;if(Array.isArray(t)){let o=t.map(n=>y(n,r+2));return`${e}[
${o.join(`
`)}
${e}]`}else return typeof t=="object"?`${e}{
${I(t,r+2)}
${e}}`:`${e}${JSON.stringify(t)}`}function I(t,r=0){let e=[],o=" ".repeat(r);for(let[n,c]of Object.entries(t))if(c!==void 0)if(c===null)e.push(`${o}${$(n)} = ${y(c)};`);else if(Array.isArray(c)){e.push(`${o}${$(n)} = [`);for(let s of c)e.push(y(s,r+2));e.push(`${o}];`)}else typeof c=="object"?(e.push(`${o}${$(n)} = {`),e.push(I(c,r+2)),e.push(`${o}};`)):e.push(`${o}${$(n)} = ${y(c)};`);return e.join(`
`)}async function j(t){await N.default.writeFile("berry.nix",`${y(t)}
`)}async function A(t,r){var n,c;let e=(c=(n=t.configuration.plugins.get("@yarnpkg/plugin-npm"))==null?void 0:n.fetchers)==null?void 0:c.find(s=>"getLocatorUrl"in s&&typeof s.getLocatorUrl=="function"),o=[];for(let s of t.storedPackages.values()){let{protocol:p}=i.structUtils.parseRange(s.reference),w=r.getVersionFilename(s),R=t.storedChecksums.get(s.locatorHash),{hash:S}=Z(R);if(S===null)continue;let f=S,g={name:s.name,scope:s.scope,identHash:s.identHash,locatorHash:s.locatorHash,reference:s.reference},P={compressionLevel:t.configuration.get("compressionLevel"),prefixPath:i.structUtils.getIdentVendorPath(s)};if(p==="npm:"){let l=`${F.npmConfigUtils.getScopeRegistry(s.scope,{configuration:t.configuration})}${e.getLocatorUrl(s)}`;o.push({name:w,convert:P,source:{type:"url",url:l},locator:g,sha512:f})}else if(p==="patch:"){let{sourceLocator:m}=O.patchUtils.parseLocator(s),l=r.getVersionFilename(m);o.push({name:w,source:{type:"patch",source:l},locator:g,sha512:f})}else if(p==="git+ssh:"||p==="git+https:"){let{repo:m,treeish:l}=d.gitUtils.splitRepoUrl(s.reference);if(l.protocol!==d.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");o.push({name:w,convert:P,source:{type:"git",url:m.substring(4),rev:l.request},prepare:!0,locator:g,sha512:f})}else if(s.reference.startsWith("https://github.com/")){let{repo:m,treeish:l}=d.gitUtils.splitRepoUrl(s.reference);if(l.protocol!==d.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");let E=`https://codeload.github.com${new URL(m).pathname.replace(/.git$/,"")}/tar.gz/${l.request}`;o.push({name:w,convert:P,source:{type:"url",url:E},prepare:!0,locator:g,sha512:f})}}return o}var U=class extends x.BaseCommand{async execute(){let r=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:e}=await i.Project.find(r,this.context.cwd),o=await i.Cache.find(r);await e.applyLightResolution(),await j(await A(e,o))}};U.paths=[["makeBerryNix"]];var k=class extends x.BaseCommand{constructor(){super(...arguments);this.source=u.Option.String();this.target=u.Option.String();this.locator=u.Option.String()}async execute(){let e=await i.Configuration.find(this.context.cwd,this.context.plugins),o=JSON.parse(await a.xfs.readFilePromise(a.npath.toPortablePath(this.locator),"utf8")),n=a.npath.toPortablePath(this.source),c=a.npath.toPortablePath(this.target);await a.xfs.mktempPromise(async s=>{var f;let p;if((await a.xfs.statPromise(n)).isDirectory())p=n;else{let g=new a.CwdFS(s),P=await a.xfs.readFilePromise(n);await i.tgzUtils.extractArchiveTo(P,g,{stripComponents:1}),p=s}let R=d.gitUtils.splitRepoUrl(o.reference),S=a.ppath.join(this.context.cwd,c);await i.scriptUtils.prepareExternalProject(p,S,{configuration:e,report:new i.StreamReport({configuration:e,stdout:this.context.stdout}),workspace:(f=R.extra.workspace)!=null?f:null,locator:o})})}};k.paths=[["prepareDependency"]];var v=class extends x.BaseCommand{constructor(){super(...arguments);this.source=u.Option.String();this.target=u.Option.String();this.compressionLevel=u.Option.String("--compressionLevel","mixed");this.prefixPath=u.Option.String()}async execute(){let e=a.npath.toPortablePath(this.source),o=a.npath.toPortablePath(this.target),n=this.compressionLevel==="mixed"?"mixed":parseInt(this.compressionLevel),c=await a.xfs.readFilePromise(e),s=await i.tgzUtils.convertToZip(c,{compressionLevel:n,prefixPath:a.npath.toPortablePath(this.prefixPath),stripComponents:1});s.saveAndClose();let p=s.getRealPath();await a.xfs.copyFilePromise(p,o)}};v.paths=[["tgzToZip"]];var C=class extends x.BaseCommand{constructor(){super(...arguments);this.locator=u.Option.String()}async execute(){let e=JSON.parse(await a.xfs.readFilePromise(a.npath.toPortablePath(this.locator),"utf8")),o=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:n}=await i.Project.find(o,this.context.cwd),c=await i.Cache.find(o);await n.applyLightResolution();let s=o.makeFetcher();await s.fetch(e,{checksums:n.storedChecksums,project:n,cache:c,fetcher:s,report:new i.StreamReport({configuration:o,stdout:this.context.stdout}),cacheOptions:{mirrorWriteOnly:!0}})}};C.paths=[["fetchLocator"]];var q={commands:[v,U,C,k],hooks:{async afterAllInstalled(t,{cache:r}){process.env.SKIP_BERRY_NIX===void 0&&await j(await A(t,r))}}},W=q;return T(X);})();
return plugin;
}
};
