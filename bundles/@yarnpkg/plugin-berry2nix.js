/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-berry2nix",
factory: function (require) {
"use strict";var plugin=(()=>{var A=Object.create;var x=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var h=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(o,e)=>(typeof require<"u"?require:o)[e]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});var G=(t,o)=>{for(var e in o)x(t,e,{get:o[e],enumerable:!0})},U=(t,o,e,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of z(o))!T.call(t,s)&&s!==e&&x(t,s,{get:()=>o[s],enumerable:!(r=F(o,s))||r.enumerable});return t};var H=(t,o,e)=>(e=t!=null?A(E(t)):{},U(o||!t||!t.__esModule?x(e,"default",{value:t,enumerable:!0}):e,t)),J=t=>U(x({},"__esModule",{value:!0}),t);var K={};G(K,{default:()=>B});var v=H(h("fs/promises")),w=h("@yarnpkg/cli"),i=h("@yarnpkg/core"),a=h("@yarnpkg/fslib"),m=h("@yarnpkg/plugin-git"),S=h("@yarnpkg/plugin-npm"),L=h("@yarnpkg/plugin-patch"),l=h("clipanion");function V(t){if(t===void 0)return{cacheKey:null,hash:null};let o=t.indexOf("/");if(o<0)throw new Error("Invalid checksum");let e=t.substring(0,o),r=t.substring(o+1);return{cacheKey:e,hash:r}}var Z=/[a-zA-Z_][a-zA-Z0-9_'-]*/;function y(t){return Z.test(t)?t:JSON.stringify(t)}function P(t,o=0){let e=" ".repeat(o);if(t===void 0)throw new Error("undefined cannot be represented");if(t===null)return`${e}${JSON.stringify(t)}`;if(Array.isArray(t)){let r=t.map(s=>P(s,o+2));return`${e}[
${r.join(`
`)}
${e}]`}else return typeof t=="object"?`${e}{
${N(t,o+2)}
${e}}`:`${e}${JSON.stringify(t)}`}function N(t,o=0){let e=[],r=" ".repeat(o);for(let[s,n]of Object.entries(t))if(n!==void 0)if(n===null)e.push(`${r}${y(s)} = ${P(n)};`);else if(Array.isArray(n)){e.push(`${r}${y(s)} = [`);for(let c of n)e.push(P(c,o+2));e.push(`${r}];`)}else typeof n=="object"?(e.push(`${r}${y(s)} = {`),e.push(N(n,o+2)),e.push(`${r}};`)):e.push(`${r}${y(s)} = ${P(n)};`);return e.join(`
`)}async function O(t){await v.default.writeFile("berry.nix",`${P(t)}
`)}async function j(t,o){let e=[];for(let r of t.storedPackages.values()){let{protocol:s}=i.structUtils.parseRange(r.reference),n=o.getVersionFilename(r),c=t.storedChecksums.get(r.locatorHash),{hash:$}=V(c);if($===null)continue;let f=$,g={name:r.name,scope:r.scope,identHash:r.identHash,locatorHash:r.locatorHash,reference:r.reference},d={compressionLevel:t.configuration.get("compressionLevel"),prefixPath:i.structUtils.getIdentVendorPath(r)};if(s==="npm:"){let p=`${S.npmConfigUtils.getScopeRegistry(r.scope,{configuration:t.configuration})}${S.NpmSemverFetcher.getLocatorUrl(r)}`;e.push({name:n,convert:d,source:{type:"url",url:p},locator:g,sha512:f})}else if(s==="patch:"){let{sourceLocator:u}=L.patchUtils.parseLocator(r),p=o.getVersionFilename(u);e.push({name:n,source:{type:"patch",source:p},locator:g,sha512:f})}else if(s==="git+ssh:"||s==="git+https:"){let{repo:u,treeish:p}=m.gitUtils.splitRepoUrl(r.reference);if(p.protocol!==m.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");e.push({name:n,convert:d,source:{type:"git",url:u.substring(4),rev:p.request},prepare:!0,locator:g,sha512:f})}else if(r.reference.startsWith("https://github.com/")){let{repo:u,treeish:p}=m.gitUtils.splitRepoUrl(r.reference);if(p.protocol!==m.gitUtils.TreeishProtocols.Commit)throw new Error("Git URLs must be resolved to a commit");let I=`https://codeload.github.com${new URL(u).pathname.replace(/.git$/,"")}/tar.gz/${p.request}`;e.push({name:n,convert:d,source:{type:"url",url:I},prepare:!0,locator:g,sha512:f})}}return e}var b=class extends w.BaseCommand{static paths=[["makeBerryNix"]];async execute(){let o=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:e}=await i.Project.find(o,this.context.cwd),r=await i.Cache.find(o);await e.applyLightResolution(),await O(await j(e,r))}},C=class extends w.BaseCommand{static paths=[["prepareDependency"]];source=l.Option.String();target=l.Option.String();locator=l.Option.String();async execute(){let o=await i.Configuration.find(this.context.cwd,this.context.plugins),e=JSON.parse(await a.xfs.readFilePromise(a.npath.toPortablePath(this.locator),"utf8")),r=a.npath.toPortablePath(this.source),s=a.npath.toPortablePath(this.target);await a.xfs.mktempPromise(async n=>{let c;if((await a.xfs.statPromise(r)).isDirectory())c=r;else{let d=new a.CwdFS(n),u=await a.xfs.readFilePromise(r);await i.tgzUtils.extractArchiveTo(u,d,{stripComponents:1}),c=n}let f=m.gitUtils.splitRepoUrl(e.reference),g=a.ppath.join(this.context.cwd,s);await i.scriptUtils.prepareExternalProject(c,g,{configuration:o,report:new i.StreamReport({configuration:o,stdout:this.context.stdout}),workspace:f.extra.workspace??null,locator:e})})}},k=class extends w.BaseCommand{static paths=[["tgzToZip"]];source=l.Option.String();target=l.Option.String();compressionLevel=l.Option.String("--compressionLevel","mixed");prefixPath=l.Option.String();async execute(){let o=a.npath.toPortablePath(this.source),e=a.npath.toPortablePath(this.target),r=this.compressionLevel==="mixed"?"mixed":parseInt(this.compressionLevel),s=await a.xfs.readFilePromise(o),n=await i.tgzUtils.convertToZip(s,{compressionLevel:r,prefixPath:a.npath.toPortablePath(this.prefixPath),stripComponents:1});n.saveAndClose();let c=n.getRealPath();await a.xfs.copyFilePromise(c,e)}},R=class extends w.BaseCommand{static paths=[["fetchLocator"]];locator=l.Option.String();async execute(){let o=JSON.parse(await a.xfs.readFilePromise(a.npath.toPortablePath(this.locator),"utf8")),e=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:r}=await i.Project.find(e,this.context.cwd),s=await i.Cache.find(e);await r.applyLightResolution();let n=e.makeFetcher();await n.fetch(o,{checksums:r.storedChecksums,project:r,cache:s,fetcher:n,report:new i.StreamReport({configuration:e,stdout:this.context.stdout}),cacheOptions:{mirrorWriteOnly:!0}})}},_={commands:[k,b,R,C],hooks:{async afterAllInstalled(t,{cache:o}){process.env.SKIP_BERRY_NIX===void 0&&await O(await j(t,o))}}},B=_;return J(K);})();
return plugin;
}
};
